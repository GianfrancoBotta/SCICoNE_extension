from snakemake.utils import min_version
import os

configfile: "/cluster/work/bewi/members/gbotta/exploratory_da/config/config.yaml"

min_version(config["snakemake_min_version"])

container: f"docker://condaforge/mambaforge:{config['mambaforge_version']}" # to allow for reproducibility


rule all:
    input:
        expand(
            "/cluster/work/bewi/members/gbotta/exploratory_da/results/qc/on_target/gc_bias/{sample}",
            sample=config["sample_names"]
        )
        

### PREPARE FILES AND REFERENCES FOR QC
rule get_healthy_cells:
    input:
        anno="/cluster/work/bewi/members/jgawron/bam_files/{sample}.healthy_cell_annotation.csv"
    output:
        anno="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/bams/{sample}/healthy_cells.txt"
    shell:
        r"""
        mkdir -p $(dirname {output.anno});
        awk -F, 'tolower($3)=="healthy" {{print $1}}' {input.anno} > {output.anno}
        """
        
rule subset_bam_healthy_cells:
    input:
        bam="/cluster/work/bewi/members/jgawron/bam_files/{sample}.mapped.sorted.bam",
        anno="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/bams/{sample}/healthy_cells.txt"
    output:
        bam="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/bams/{sample}/mapped.sorted.healthy_cells.bam"
    threads: config["subset_threads"]
    log:
        "logs/prepare/bams/{sample}/subset_bams_hc.log"
    conda:
        "envs/standalone/samtools.yaml"
    shell:
        """
        samtools view -h -b -@ {threads} -R {input.anno} {input.bam} > {output.bam} 2> {log};
        samtools index {output.bam}
        """

rule download_hg19_gtf_and_get_only_genes:
    output:
        gtf="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/gtf_files/gencode.v19.annotation.gene_only.gtf"
    params:
        gtf_link=config["hg19_gtf_link"],
        zipped_gtf="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/gtf_files/gencode.v19.annotation.gtf.gz",
        unzipped_gtf="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/gtf_files/gencode.v19.annotation.gtf"
    log:
        "logs/prepare/references/hg19_gtf.log"
    shell:
        r"""
        mkdir -p $(dirname {output.gtf});
        wget -O {params.zipped_gtf} {params.gtf_link} &> {log};
        gzip -dk {params.zipped_gtf};
        awk '$3=="exon"' {params.unzipped_gtf} > {output.gtf}
        """

rule convert_hg19_gtf_to_bed:
    input:
        gtf="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/gtf_files/gencode.v19.annotation.exon_only.gtf"
    output:
        bed="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/bed_files/gencode.v19.annotation.exon_only.bed",
    log:
        "logs/prepare/references/hg19_bed.log"
    conda:
        "envs/standalone/bedops.yaml"
    shell:
        """
        convert2bed -i gtf < {input.gtf} > {output.bed} 2> {log}
        """

rule download_hg19_fasta_and_keep_primary:
    output:
        fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/fa_files/hg19.fa",
        # fa_primary="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/fa_files/hg19.primary.fa"
    params:
        fa_link=config["hg19_fasta_link"],
        zipped_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/fa_files/hg19.fa.gz"
    log:
        "logs/prepare/references/hg19_fa.log"
    conda:
        "envs/standalone/samtools.yaml"
    shell:
        r"""
        mkdir -p $(dirname {output.fa});
        wget -O {params.zipped_fa} {params.fa_link} 2>> {log};
        gzip -dk {params.zipped_fa}
        """
        # samtools faidx {output.fa} \
        #     chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8 chr9 chr10 \
        #     chr11 chr12 chr13 chr14 chr15 chr16 chr17 chr18 chr19 \
        #     chr20 chr21 chr22 chrX chrY chrM > {output.fa_primary} 2>> {log}

rule create_off_target_bed:
    input:
        hg19_bed="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/bed_files/gencode.v19.annotation.gene_only.bed",
        on_target_bed=config["panel_bed"]
    output:
        bed="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/bed_files/off_target.bed",
    log:
        "logs/prepare/references/off_target_bed.log"
    conda:
        "envs/standalone/bedtools.yaml"
    shell:
        """
        bedtools subtract -a {input.hg19_bed} -b {input.on_target_bed} | cut -f1-3 | sort -u > {output.bed} 2> {log}
        """
        
rule create_binned_beds:
    input:
        on_target_bed=config["panel_bed"],
        off_target_bed="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/bed_files/off_target.bed"
    output:
        on_target_bed_binned="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/on_target/bed_files/on_target.binned.bed",
        off_target_bed_binned="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/bed_files/off_target.binned.bed"
    params:
        w_size_target=config["window_binning_size_target"],
        w_size_off_target=config["window_binning_size_off_target"]
    log:
        "logs/prepare/references/binned_beds.log"
    conda:
        "envs/standalone/bedtools.yaml"
    shell:
        """
        bedtools makewindows -b {input.on_target_bed} -w {params.w_size_target} > {output.on_target_bed_binned} 2>> {log};
        bedtools makewindows -b {input.off_target_bed} -w {params.w_size_off_target} > {output.off_target_bed_binned} 2>> {log}
        """

rule create_onoff_target_fasta:
    input:
        complete_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/fa_files/hg19.fa",
        on_target_bed=config["panel_bed"],
        off_target_bed="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/bed_files/off_target.bed"
    output:
        on_target_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/on_target/fa_files/on_target.fa",
        off_target_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/fa_files/off_target.fa"
    log:
        "logs/prepare/references/split_fasta.log"
    conda:
        "envs/standalone/bedtools.yaml"
    shell:
        """
        bedtools getfasta -fi {input.complete_fa} -bed {input.on_target_bed} -fo {output.on_target_fa} 2>> {log};
        bedtools getfasta -fi {input.complete_fa} -bed {input.off_target_bed} -fo {output.off_target_fa} 2>> {log}
        """

rule get_2bit_fasta:
    input:
        on_target_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/on_target/fa_files/on_target.fa",
        off_target_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/fa_files/off_target.fa",
        complete_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/fa_files/hg19.fa"
    output:
        on_target_2bit="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/on_target/2bit_files/on_target.2bit",
        off_target_2bit="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/2bit_files/off_target.2bit",
        complete_2bit="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/2bit_files/hg19.2bit"
    log:
        "logs/prepare/references/fato2bit.log"
    conda:
        "envs/standalone/ucsc.yaml"
    shell:
        """
        faToTwoBit {input.on_target_fa} {output.on_target_2bit} 2>> {log};
        faToTwoBit {input.off_target_fa} {output.off_target_2bit} 2>> {log};
        faToTwoBit {input.complete_fa} {output.complete_2bit} 2>> {log}
        """

rule get_effective_genomes_size:
    input:
        on_target_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/on_target/fa_files/on_target.fa",
        off_target_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/fa_files/off_target.fa"
    output:
        on_target_egs="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/on_target/egs/on_target.effective_size.txt",
        off_target_egs="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/egs/off_target.effective_size.txt"
    log:
        "logs/prepare/references/effective_size.log"
    conda:
        "envs/standalone/ucsc.yaml"
    shell:
        r"""
        faCount {input.on_target_fa} | grep total | cut -f3-6 | awk '{{sum=0; for(i=1;i<=NF;i++) sum+=$i; print sum}}' > {output.on_target_egs} 2>> {log};
        faCount {input.off_target_fa} | grep total | cut -f3-6 | awk '{{sum=0; for(i=1;i<=NF;i++) sum+=$i; print sum}}' > {output.off_target_egs} 2>> {log}
        """


# rule split_bams_on_off_target_reads:
#     input:
#         bam="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/split_bams/healthy_cells/{sample}/mapped.sorted.healthy_cells.bam",
#         panel_bed=config["panel_bed"],
#         off_panel_bed="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/bed_files/off_panel.bed"
#     output:
#         idx="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/split_bams/healthy_cells/{sample}/mapped.sorted.healthy_cells.bai",
#         panel_bam="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/split_bams/healthy_cells/{sample}/mapped.sorted.healthy_cells.target.bam",
#         off_panel_bam="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/split_bams/healthy_cells/{sample}/mapped.sorted.healthy_cells.off_target.bam"
#     threads: config["subset_threads"]
#     log:
#         "logs/qc/healthy_cells/{sample}/subset_bams_onoff.log"
#     conda:
#         "envs/standalone/samtools.yaml"
#     shell:
#         """
#         samtools index -@ {threads} -o {output.idx} {input.bam};
#         samtools view -h -b -@ {threads} --region-file {input.panel_bed} {input.bam} > {output.panel_bam} 2>> {log};
#         samtools index {output.panel_bam};
#         samtools view -h -b -@ {threads} --region-file {input.off_panel_bed} {input.bam} > {output.off_panel_bam} 2>> {log}
#         samtools index {output.off_panel_bam};
#         """

### QC
# Average chromosome coverage
# rule get_chr_avg_coverage:
#     input:
#         panel_bam="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/split_bams/healthy_cells/{sample}/mapped.sorted.healthy_cells.target.bam",
#         off_panel_bam="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/split_bams/healthy_cells/{sample}/mapped.sorted.healthy_cells.off_target.bam"
#     output:
#         tables_dir=directory("/cluster/work/bewi/members/gbotta/exploratory_da/results/qc/coverage/{sample}")
#     log:
#         log="logs/qc/coverage/{sample}/coverage.log"
#     conda:
#         "envs/standalone/samtools.yaml"
#     shell:
#         """
#         mkdir -p {output.tables_dir};
#         samtools coverage -o {output.tables_dir}/coverage_target.tsv {input.panel_bam} 2>> {log};
#         samtools coverage -o {output.tables_dir}/coverage_off_target.tsv {input.off_panel_bam} 2>> {log}
#         """

# rule plot_coverage:
#     input:
#         tables_dir = expand(
#             "/cluster/work/bewi/members/gbotta/exploratory_da/results/qc/coverage/{sample}",
#             sample=config["sample_names"]
#         )
#     output:
#         plot_dir=directory("/cluster/work/bewi/members/gbotta/exploratory_da/plots/qc/coverage")
#     params:
#         depth_idx=3,
#         samples=config["sample_names"]
#     log:
#         log="logs/qc/plot/depth_plots.log"
#     conda:
#         "envs/py/qc_plot.yaml"
#     script:
#         "scripts/py/qc_depth_plot.py"

# Per base depth
# rule get_per_base_depth:
#     input:
#         bam="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/split_bams/healthy_cells/{sample}/mapped.sorted.healthy_cells.bam",
#         panel_bed_binned="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/bed_files/panel.binned.bed",
#         off_panel_bed_binned="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/bed_files/off_panel.binned.bed"
#     output:
#         tables_dir=directory("/cluster/work/bewi/members/gbotta/exploratory_da/results/qc/depth/{sample}")
#     log:
#         "logs/qc/depth/{sample}/depth.log"
#     conda:
#         "envs/standalone/samtools.yaml"
#     shell:
#         """
#         mkdir -p {output.tables_dir};
#         samtools depth -H -b {input.panel_bed_binned} -o {output.tables_dir}/depth_target.tsv {input.bam} 2>> {log};
#         samtools depth -H -b {input.off_panel_bed_binned} -o {output.tables_dir}/depth_off_target.tsv {input.bam} 2>> {log}
#         """

rule get_binned_depth:
    input:
        bam="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/bams/{sample}/mapped.sorted.healthy_cells.bam",
        on_target_bed_binned="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/on_target/bed_files/on_target.binned.bed",
        off_target_bed_binned="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/bed_files/off_target.binned.bed"
    output:
        tables_dir=directory("/cluster/work/bewi/members/gbotta/exploratory_da/results/qc/depth/{sample}")
    log:
        "logs/qc/depth/{sample}/binned_depth.log"
    threads:
        config["qc_threads"]
    conda:
        "envs/standalone/mosdepth.yaml"
    shell:
        """
        mkdir -p {output.tables_dir};
        mosdepth -b {input.on_target_bed_binned} -t {threads} {output.tables_dir}/target {input.bam} &>> {log};
        mosdepth -b {input.off_target_bed_binned} -t {threads} {output.tables_dir}/off_target {input.bam} &>> {log}
        """

rule plot_depth:
    input:
        tables_dir = expand(
            "/cluster/work/bewi/members/gbotta/exploratory_da/results/qc/depth/{sample}",
            sample=config["sample_names"]
        )
    output:
        plot_dir=directory("/cluster/work/bewi/members/gbotta/exploratory_da/plots/qc/depth")
    params:
        depth_idx=4,
        samples=config["sample_names"]
    log:
        log="logs/qc/plot/depth_plots.log"
    conda:
        "envs/py/qc_plot.yaml"
    script:
        "scripts/py/qc_depth_plot.py"

rule get_gc_bias:
    input:
        bam="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/bams/{sample}/mapped.sorted.healthy_cells.bam",
        on_target_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/on_target/fa_files/on_target.fa",
        off_target_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/off_target/fa_files/off_target.fa",
        # complete_fa="/cluster/work/bewi/members/gbotta/exploratory_da/results/prepare/references/complete/fa_files/hg19.align.fa"
        complete_fa="/cluster/work/bewi/members/jgawron/INTeRCePT/tapestri/hg19/ucsc_hg19.fa"
    output:
        on_target_dir=directory("/cluster/work/bewi/members/gbotta/exploratory_da/results/qc/on_target/gc_bias/{sample}"),
        off_target_dir=directory("/cluster/work/bewi/members/gbotta/exploratory_da/results/qc/off_target/gc_bias/{sample}")
    params:
        w_size_on_target=config["window_binning_size_target"],
        w_size_off_target=config["window_binning_size_off_target"]
    threads:
        config["qc_threads"]
    log:
        log="logs/qc/gc_bias/{sample}/gcbias.log"
    conda:
        "envs/standalone/picard.yaml"
    shell:
        """
        mkdir -p {output.on_target_dir};
        mkdir -p {output.off_target_dir};
        picard CollectGcBiasMetrics INPUT={input.bam} \
            OUTPUT={output.on_target_dir}/gc_bias_metrics.txt \
            CHART_OUTPUT={output.on_target_dir}/gc_bias_metrics.pdf \
            SUMMARY_OUTPUT={output.on_target_dir}/summary_metrics.txt \
            SCAN_WINDOW_SIZE={params.w_size_on_target} \
            REFERENCE_SEQUENCE={input.complete_fa} 2>> {log};
        picard CollectGcBiasMetrics INPUT={input.bam} \
            OUTPUT={output.off_target_dir}/gc_bias_metrics.txt \
            CHART_OUTPUT={output.off_target_dir}/gc_bias_metrics.pdf \
            SUMMARY_OUTPUT={output.off_target_dir}/summary_metrics.txt \
            SCAN_WINDOW_SIZE={params.w_size_off_target} \
            REFERENCE_SEQUENCE={input.complete_fa} 2>> {log};
        """